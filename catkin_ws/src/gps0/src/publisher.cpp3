#include "ros/ros.h"
#include "std_msgs/String.h"
#include "geometry_msgs/Vector3.h"
#include <sstream>
#include <gps.h>

char * node_name="gps_pub_node";
char * topic_name="gps";


int main(int argc, char **argv){
	ROS_INFO("[%s] init",node_name);
  //INIT
  ros::init(argc, argv, node_name);
  ros::NodeHandle n;
 
  ros::Publisher pub = n.advertise<geometry_msgs::Vector3>("gps", 1000);

  ros::Rate loop_rate(5);

    //INIT CALIB
ROS_INFO("bi");
int rc;
struct timeval tv;

struct gps_data_t gps_data;
if ((rc = gps_open("localhost", "2947", &gps_data)) == -1) {
    printf("code: %d, reason: %s\n", rc, gps_errstr(rc));
    return EXIT_FAILURE;
}
gps_stream(&gps_data, WATCH_ENABLE | WATCH_JSON, NULL);

ROS_INFO("bi f");

  while (ros::ok())  {
	if (gps_waiting (&gps_data, 2000000)) {
        /* read data */
        if ((rc = gps_read(&gps_data)) == -1) {
            printf("error occured reading gps data. code: %d, reason: %s\n", rc, gps_errstr(rc));
        } else {
            /* Display data from the GPS receiver. */
            if ((gps_data.status == STATUS_FIX) && 
                (gps_data.fix.mode == MODE_2D || gps_data.fix.mode == MODE_3D) &&
                !isnan(gps_data.fix.latitude) && 
                !isnan(gps_data.fix.longitude)) {
                //gettimeofday(&tv, NULL); EDIT: tv.tv_sec isn't actually the timestamp!
                printf("latitude: %f, longitude: %f, speed: %f, timestamp: %lf\n", gps_data.fix.latitude, gps_data.fix.longitude, gps_data.fix.speed, gps_data.fix.time); //EDIT: Replaced tv.tv_sec with gps_data.fix.time
		geometry_msgs::Vector3 gyro_val;
        	gyro_val.x=     gps_data.fix.latitude;
	        gyro_val.y=     gps_data.fix.longitude;
        	gyro_val.z=     0;
	        pub.publish(gyro_val);
        	ROS_INFO("%f %f",gps_data.fix.latitude, gps_data.fix.longitude);
            } else {
                printf("no GPS data available\n");
            }
        }
    }


}
    ros::spinOnce();
    loop_rate.sleep();
  }


gps_stream(&gps_data, WATCH_DISABLE, NULL);
gps_close (&gps_data);
  return 0;
}
