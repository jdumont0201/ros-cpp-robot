[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/server.cpp:9:13:[m[K [01;35m[Kwarning: [m[Kdeprecated conversion from string constant to â€˜[01m[Kchar*[m[Kâ€™ [-Wwrite-strings]
 char * name="ledx";
[01;32m[K             ^[m[K
[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/server.cpp:10:18:[m[K [01;35m[Kwarning: [m[Kdeprecated conversion from string constant to â€˜[01m[Kchar*[m[Kâ€™ [-Wwrite-strings]
 char * node_name="ledx_server";
[01;32m[K                  ^[m[K
[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/server.cpp:11:21:[m[K [01;35m[Kwarning: [m[Kdeprecated conversion from string constant to â€˜[01m[Kchar*[m[Kâ€™ [-Wwrite-strings]
 char * service_name="ledx_mode";
[01;32m[K                     ^[m[K
[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/server.cpp:12:19:[m[K [01;35m[Kwarning: [m[Kdeprecated conversion from string constant to â€˜[01m[Kchar*[m[Kâ€™ [-Wwrite-strings]
 char * topic_name="ledx_mode";
[01;32m[K                   ^[m[K
[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/client.cpp:6:13:[m[K [01;35m[Kwarning: [m[Kdeprecated conversion from string constant to â€˜[01m[Kchar*[m[Kâ€™ [-Wwrite-strings]
 char * name="ledx_client";
[01;32m[K             ^[m[K
[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/client.cpp:7:21:[m[K [01;35m[Kwarning: [m[Kdeprecated conversion from string constant to â€˜[01m[Kchar*[m[Kâ€™ [-Wwrite-strings]
 char * service_name="/ledx_mode";
[01;32m[K                     ^[m[K
In file included from [01m[K/opt/ros/lunar/include/ros/ros.h:40:0[m[K,
                 from [01m[K/home/jbmdumont/catkin_ws/src/ledx/src/client.cpp:1[m[K:
[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/client.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[01m[K/opt/ros/lunar/include/ros/console.h:346:176:[m[K [01;35m[Kwarning: [m[Kformat â€˜[01m[K%s[m[Kâ€™ expects argument of type â€˜[01m[Kchar*[m[Kâ€™, but argument 9 has type â€˜[01m[Kint[m[Kâ€™ [-Wformat=]
     ::ros::console::print(filter, __rosconsole_define_location__loc.logger_, __rosconsole_define_location__loc.level_, __FILE__, __LINE__, __ROSCONSOLE_FUNCTION__, __VA_ARGS__)
[01;32m[K                                                                                                                                                                                ^[m[K
[01m[K/opt/ros/lunar/include/ros/console.h:349:5:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROSCONSOLE_PRINT_AT_LOCATION_WITH_FILTER[m[Kâ€™
     ROSCONSOLE_PRINT_AT_LOCATION_WITH_FILTER(0, __VA_ARGS__)
[01;32m[K     ^[m[K
[01m[K/opt/ros/lunar/include/ros/console.h:379:7:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROSCONSOLE_PRINT_AT_LOCATION[m[Kâ€™
       ROSCONSOLE_PRINT_AT_LOCATION(__VA_ARGS__); \
[01;32m[K       ^[m[K
[01m[K/opt/ros/lunar/include/ros/console.h:561:35:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROS_LOG_COND[m[Kâ€™
 #define ROS_LOG(level, name, ...) ROS_LOG_COND(true, level, name, __VA_ARGS__)
[01;32m[K                                   ^[m[K
[01m[K/opt/ros/lunar/include/rosconsole/macros_generated.h:110:23:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROS_LOG[m[Kâ€™
 #define ROS_INFO(...) ROS_LOG(::ros::console::levels::Info, ROSCONSOLE_DEFAULT_NAME, __VA_ARGS__)
[01;32m[K                       ^[m[K
[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/client.cpp:54:4:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROS_INFO[m[Kâ€™
    ROS_INFO("[%s] Call OK [%s]  [%s]",name,srv.request.status,srv.response.res);
[01;32m[K    ^[m[K
[01m[K/opt/ros/lunar/include/ros/console.h:346:176:[m[K [01;35m[Kwarning: [m[Kformat â€˜[01m[K%s[m[Kâ€™ expects argument of type â€˜[01m[Kchar*[m[Kâ€™, but argument 10 has type â€˜[01m[Kledx::modeResponse_<std::allocator<void> >::_res_type* {aka std::__cxx11::basic_string<char>*}[m[Kâ€™ [-Wformat=]
     ::ros::console::print(filter, __rosconsole_define_location__loc.logger_, __rosconsole_define_location__loc.level_, __FILE__, __LINE__, __ROSCONSOLE_FUNCTION__, __VA_ARGS__)
[01;32m[K                                                                                                                                                                                ^[m[K
[01m[K/opt/ros/lunar/include/ros/console.h:349:5:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROSCONSOLE_PRINT_AT_LOCATION_WITH_FILTER[m[Kâ€™
     ROSCONSOLE_PRINT_AT_LOCATION_WITH_FILTER(0, __VA_ARGS__)
[01;32m[K     ^[m[K
[01m[K/opt/ros/lunar/include/ros/console.h:379:7:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROSCONSOLE_PRINT_AT_LOCATION[m[Kâ€™
       ROSCONSOLE_PRINT_AT_LOCATION(__VA_ARGS__); \
[01;32m[K       ^[m[K
[01m[K/opt/ros/lunar/include/ros/console.h:561:35:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROS_LOG_COND[m[Kâ€™
 #define ROS_LOG(level, name, ...) ROS_LOG_COND(true, level, name, __VA_ARGS__)
[01;32m[K                                   ^[m[K
[01m[K/opt/ros/lunar/include/rosconsole/macros_generated.h:110:23:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROS_LOG[m[Kâ€™
 #define ROS_INFO(...) ROS_LOG(::ros::console::levels::Info, ROSCONSOLE_DEFAULT_NAME, __VA_ARGS__)
[01;32m[K                       ^[m[K
[01m[K/home/jbmdumont/catkin_ws/src/ledx/src/client.cpp:54:4:[m[K [01;36m[Knote: [m[Kin expansion of macro â€˜[01m[KROS_INFO[m[Kâ€™
    ROS_INFO("[%s] Call OK [%s]  [%s]",name,srv.request.status,srv.response.res);
[01;32m[K    ^[m[K
